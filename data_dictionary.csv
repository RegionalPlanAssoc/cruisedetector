column_name,type,description,notes
trip_id,integer,unique ID of the trip,"do not confuse with trip_id_sl, which is StreetLight's numbering system"
lines_geom,geometry (includes an M coordinate with the timestamp),line of GPS trace,
start_geom,geometry,start point of GPS trace,
end_geom,geometry,end point of GPS trace,
edge_ids,array,"array of edge_ids, in the order traversed, for the 400m buffer",
match_score,float,a score to estimate the probability of a successful match based on a logistic regression model,
matched_line,geometry,"(NOT IMPLEMENTED) line of GPS trace, snapped to the street network",
lbuff_geom_cleaned,geometryM,cleaned version of lbuff_geom (errant points dropped),
lines_original,geometryM,"original version of lines_geom, before dropping some errrant pings",
lines_tmp,,"intermediate column, safe to drop",
npings,integer,number of GPS pings,
id_first,integer,"index of last point befofre the 400m buffer is entered for the first time (i.e., the point before the first point in the 400m buffer)","The linestring is made of of multiple points (nodes). This helps narrow down the linestring to the portion in the 400m buffer, for subsequent calculations."
id_firstx2,integer,"index of last point befofre the 800m buffer is entered for the first time (i.e., the point before the first point in the 800m buffer)",
id_walk,integer,index of point that marks the transition to the walk segment ,
id_park,integer,index of point that marks the transition to the parking lot segment ,
maxspeed,float,maximum speed between any two pings after entering the 400m buffer. Useful in eliminating trips with an errant GPS point,
speed,float,average speed after entering the 400m buffer,
donutspeed,float,average speed in the 'donut' (after entering the 800m buffer but before entering the 400m buffer),
walkspeed,float,"average speed (km/h)  of walk segment (calculated from raw GPS trace, not map matched)",
pingtime_meanall,float,average temporal resolution of the entire trace,
pingtime_maxall,float,maximum temporal resolution of the entire trace,
pingtime_meanbuf,float,average temporal resolution of the trace after entering the 400m buffer,
pingtime_maxbuf,float,maximum temporal resolution of the trace after entering the 400m buffer,
npingsbuf,float,number of GPS pings after entering the 400m buffer,
npingsdonut,float,number of GPS pings in the donut,
npingswalk,integer,number of pings on the walk segment,
pingtime_meanwalk,float,average temporal resolution of the walk segment of the trace,
pt_maxwalk,float,maximum temporal resolution of the walk segment of the trace,
npingspark,integer,number of pings in the parking lot segment,
lbuff_geom,geometryM,"portion of the trace after entering the 400m buffer, until the trace parks or enters the lot. This is the key portion of the trace for analysis",
lineswalk_geom,geometry (includes an M coordinate with the timestamp),"linesall_geom400, after  the point where the walk segment starts",
lineslot_geom,geometry (includes an M coordinate with the timestamp),"linesall_geom400, between the point where the parking lot segment (if any) starts and the point where the walk segment starts",
linesall_geom,geometry (includes an M coordinate with the timestamp),portion of the trace after entering the 400m buffer. This should be the same as lbuff_geom + lineslot_geom + lineswalk_geom,
startpt_geom,geometry (includes an M coordinate with the timestamp),first point where the trace enters the 400m radius of the end point,
enterlot_geom,geometry (includes an M coordinate with the timestamp),"end point of lbuff_geom (i.e., the parking location where the parking lot or walk segment starts). Same as end_geom if there is no walk segment",
park_geom,geometry (includes an M coordinate with the timestamp),"end point of lineslot_geom or if null, lbuff_geom (i.e., the parking location where the walk segment starts). Same as end_geom if there is no walk segment",
pingtime_max,float,maximum seconds between GPS pings for the map-matched trace. Should be similar to (identical to?) pingtime_maxbuff. The difference is that this is calculated in the map-matching step,
pingtime_mean,float,average seconds between GPS pings for the map-matched trace. Should be similar to (identical to?) pingtime_meanbuff. The difference is that this is calculated in the map-matching step,
gpsdist,float,length of the raw GPS trace (m) after entering 400m buffer,
matchdist,float,length of the map-matched GPS trace (m) after entering 400m buffer. This is the closest we have to actual distance driven,
edge_id_end,integer,id of the block where the trip ends. This joins to the OSM table,
block_ids,array,"array of SFpark block ids in the order traversed, after entering the 400m buffer",
ids_repeat,integer,number of repeated blocks after entering the 400m buffer. One of our measures of cruising,
endtime,timestamp with time zone,timestamp of final ping,
endhour,integer,hour at which the trip ends (0-23),
endminute,integer,minute at which the trip ends,
weekday,boolean,True if the trip ends on a non-holiday weekday,
netwkdist,float,length of the shortest-path network distance after entering 400m buffer,
max_dist,float,"maximum distance from the endpoint, once the trace enters the 400m buffer",Useful in filtering out 'lost drivers' or errands
walklength,float,distance (straight line) from park_geom to end_geom,
walkdist,float,distance (length of GPS trace) of walking segment,
parkdist,float,distance (length of GPS trace) of parking lot segment,
dist_ratio,float,"Ratio of matchdist to netwkdist, i.e. how circuituous a route did the drive take. Minimum value of 1. 1 indicates that the driver took the shortest path",
frc_inbuffer,float,fraction of matched_line that lies within the 400m buffer,"The fraction can be less than 1 because (i) the map-matching starts with the first point OUTSIDE the buffer, and (ii) drivers may leave the buffer and come back in again"
start_end_dist,float,"Euclidean distance (m) between start and end of the line (entire trace, not just the 400m buffer). Null if we don't have the true start",
cruise_time,integer,"time spent cruising (secs), defined as (matchdist - netwkdist) / speed",
cruise,boolean,"is the (difference between actual and network distance at least 5m or is  there more than 1 repeated street id) AND is maxdist less than the threshold, AND is at least 50% of the trace within the 400m buffer? I.e., any evidence of cruising? (excluding lost drivers)",
high_cruise,boolean,A more restrictive measure of cruising. Is cruise True AND is the excess distance greater than 200m,
tract,string,GEOID of census tract where trip ends,
zip,integer,ZIP code where trip ends,
end_clazz,integer,osm2po-defined road class (clazz) where trip ends,
near_meter_id,string,id of closest meter to endpoint,excludes motorcycle meters. May not be the same street as the final parking location!
near_meter_dist,float,distance to closest meter (m),
metered,boolean,True if the street where the trip ended has meters,"note that there may only be a few meters, with most spaces unmetered!"
near_lot_id,string,id of closest off-street lot to endpoint,
near_lot_dist,float,distance to closest off-street lot (m),
curb_dist,float,"distance (m) of endpoint from curbline (negative if within ROW, positive if outside)",This could be used to estimate whether the driver parks off-street
use_trip,boolean,whether we regard the cruising trip a usable trip,
use_walk,boolean,Is the walk portion usable? Experimental,
walkcurbdist,float,average distance of the walk segment to the curb. Experimental,
walkcenterlinedist,float,average distance of the walk segment to the street centerline. Experimental,
walkwiggliness,float,std dev distance of the walk segment to the street centerline. Experimental,
maxwalkspeed,float,maximum speed of the walk segment. Experimental,
frc_outside_curb,float,fraction of points in the walk segment that are outside the curbline. Experimental,